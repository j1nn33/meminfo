"--------------СПИСКИ"

print('\n'.join(list_1))     # вывод списка
"списки a = [ 1 , 3 , 5 , 7 ] изменяемые кортежи  b = ( 1 , 2 , 3 ) нет " \
"Доступ к элементам кортежа осуществляется также как к элементам списка"
" – черезуказание индекса."
int_list = [1, 2, 3, 4]
char_list = ['a', 'c', 'z']
empty_list = []
print("digit list", int_list)
"обращение к элементам списка через индексы"
my_list = [5, 7, 8, 2, 14]
print(my_list[1])
print(my_list[-1])
"вывод последнего элемена"
index = int(input("enter index of element"))
element = my_list[index]
print(element)

""""создать копию списка """
a = [ 1 , 3 , 5 , 7 ]
b = a[:]
c = list (a)

"""v - ссылка на список а не копия """
v = a

"""добавление и удаление элементов"""
a = []
a.append( 3 )
a.append( "hello" )
print (a)
а.remove( 3 )
del а[ 2 ]
"""удаление элемента по индексу"""


# СПИСОК СПИКОВ
interfaces = [['FastEthernet0/0', '15.0.15.1', 'YES', 'manual', 'up', 'up'],
              ['FastEthernet0/1', '10.0.1.1', 'YES', 'manual', 'up', 'up'],
              ['FastEthernet0/2', '10.0.2.1', 'YES', 'manual', 'up', 'down']]

interfaces[0][0]
# 'FastEthernet0/0'
interfaces[2][0]
# 'FastEthernet0/2'
interfaces[2][1]
# '10.0.2.1'

# ПРИМЕРЫ

list3 = [1, 20, 4.0, 'word']
list3[1]
# 20
list3[1::]
# [20, 4.0, 'word']
list3[-1]
# 'word'
list3[::-1]
# ['word', 4.0, 20, 1]
# Перевернуть список наоборот можно и с помощью метода reverse():
vlans = ['10', '15', '20', '30', '100-200']
vlans.reverse()
vlans
# ['100-200', '30', '20', '15', '10']

"""
МЕТОДЫ РАБОТЫ СО СПИСКАМИ
"""
join()

# Метод join() собирает список строк в одну строку с разделителем, который указан в
# join():

vlans = ['10', '20', '30', '100-200']
','.join(vlans[:-1])
# '10,20,30'


append()
# Метод append() добавляет в конец списка указанный элемент:
vlans = ['10', '20', '30', '100-200']
vlans.append('300')
vlans
# ['10', '20', '30', '100-200', '300']

extend()
# Если нужно объединить два списка, то можно использовать два способа: метод
# extend() и операцию сложения:
# Но при этом метод extend() расширяет список "на месте", а при операции сложения
# выводится итоговый суммарный список, но исходные списки не меняются.
vlans = ['10', '20', '30', '100-200']
vlans2 = ['300', '400', '500']
vlans.extend(vlans2)
vlans
# ['10', '20', '30', '100-200', '300', '400', '500']
vlans + vlans2
# ['10', '20', '30', '100-200', '300', '400', '500', '300', '400', '500']
vlans
# ['10', '20', '30', '100-200', '300', '400', '500']

pop()
# Метод pop() удаляет элемент, который соответствует указанному номеру. Но, что
# важно, при этом метод возвращает этот элемент:
# Без указания номера удаляется последний элемент списка.
vlans = ['10', '20', '30', '100-200']
vlans.pop(-1)
# '100-200'
vlans
# ['10', '20', '30']

remove()
# Метод remove() удаляет указанный элемент.
# remove() не возвращает удаленный элемент:
# В методе remove надо указывать сам элемент, который надо удалить, а не его номер в
# списке. Если указать номер элемента, возникнет ошибка:
vlans = ['10', '20', '30', '100-200']
vlans.remove('20')
vlans
# ['10', '30', '100-200']

index()
# Метод index() используется для того, чтобы проверить, под каким номером в списке
# хранится элемент:
vlans = ['10', '20', '30', '100-200']
vlans.index('30')
# 2

insert()
# Метод insert() позволяет вставить элемент на определенное место в списке:
vlans = ['10', '20', '30', '100-200']
vlans.insert(1,'15')
vlans
# ['10', '15', '20', '30', '100-200']

clear()
# Удаляет все элементы из списка. Эквивалентно del a[:] .
a = [ 1 , 2 , 3 , 4 , 5 ]
print (a)
# [ 1 , 2 , 3 , 4 , 5 ]
a.clear()
print (a)
# []


count()
# Возвращает количество вхождений элемента x в список.
a = [ 1 , 2 , 2 , 3 , 3 ]
print (a.count( 2 ))
# 2

list.sort(key=None, reverse=False)
# Сортирует элементы в списке по возрастанию. Для сортировки в обратном порядке
# используйте флаг reverse=True. Дополнительные возможности открывает параметр
# key , за более подробной информацией обратитесь к документации.
a = [ 1 , 4 , 2 , 8 , 1 ]
a.sort()
print (a)
# [ 1 , 1 , 2 , 4 , 8 ]

reverse()
# Изменяет порядок расположения элементов в списке на обратный.
a = [ 1 , 3 , 5 , 7 ]
a.reverse()
print (a)
# [ 7 , 5 , 3 , 1 ]

copy()
# Возвращает копию списка. Эквивалентно a[:] .
a = [ 1 , 7 , 9 ]
b = a.copy()
print (a)
# [ 1 , 7 , 9 ]
print (b)
# [ 1 , 7 , 9 ]
b[ 0 ] = 8
print (a)
#[ 1 , 7 , 9 ]
print (b)
#[ 8 , 7 , 9 ]

#----------------------------------------------------------
#      Генераторы списков:
list2 = ['FastEthernet0/'+ str(i) for i in range(10)]
list2
"""
['FastEthernet0/0',
'FastEthernet0/1',
'FastEthernet0/2',
'FastEthernet0/3',
'FastEthernet0/4',
'FastEthernet0/5',
'FastEthernet0/6',
'FastEthernet0/7',
'FastEthernet0/8',
'FastEthernet0/9']
"""


