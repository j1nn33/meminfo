unittest – это framework для тестирования в Python

Test fixture

Test fixture – обеспечивает подготовку окружения для выполнения тестов, 
а также организацию мероприятий по их корректному завершению (например очистка ресурсов). 
Подготовка окружения может включать в себя создание баз данных, запуск необходим серверов и т.п.

Test case

Test case – это элементарная единица тестирования, 
в рамках которой проверяется работа компонента тестируемой программы
(метод, класс, поведение и т.п.). 
Для реализации этой сущности используется класс TestCase.

Test suite

Test suite – это коллекция тестов, которая может в себя 
включать как отдельные test case’ы так и целые коллекции 
(т.е. можно создавать коллекции коллекций). Коллекции 
используются с целью объединения тестов для совместного запуска.

Test runner

Test runner – это компонент, которые оркестрирует 
(координирует взаимодействие) запуск тестов и 
предоставляет пользователю результат их выполнения. 
Test runner может иметь графический интерфейс, 
текстовый интерфейс или возвращать какое-то заранее 
заданное значение, которое будет описывать результат прохождения тестов.

Вся работа по написанию тестов заключается в том, 
что мы разрабатываем отдельные тесты в рамках test case’ов, 
собираем их в модули и запускаем, если нужно объединить несколько 
test case’ов, для их совместного запуска, они помещаются в test suite’ы, 
которые помимо test case’ов могут содержать другие test suite’ы.

=======================================================

Запуск всех тестов в модуле utest_calc.py.

> python -m unittest test_calc.py
Запуск тестов из класса CalcTest.

> python -m unittest utest_calc.CalcTest
Запуск теста test_sub().

> python -m unittest utest_calc.CalcTest.test_sub
Как уже было сказано в первой части данного цикла, для вывода подробной информации необходимо добавить ключ -v.

Если осуществить запуск без указания модуля с тестами, будет запущен Test Discovery.

> python -m unittest


Графический интерфейс пользователя (GUI)

> pip install cricket
> cricket-unittest

======================================

Методы, используемые при запуске тестов

etUp()

Метод вызывается перед запуском теста. Как правило, используется для подготовки окружения для теста.

tearDown()

Метод вызывается после завершения работы теста. Используется для “приборки” за тестом. 

==================================
==================================

import unittest
import calc


class CalcTest(unittest.TestCase):
   """Calc tests"""

   @classmethod
   def setUpClass(cls):
       """Set up for class"""
       print("setUpClass")
       print("==========")

   @classmethod
   def tearDownClass(cls):
       """Tear down for class"""
       print("==========")
       print("tearDownClass")

   def setUp(self):
       """Set up for test"""
       print("Set up for [" + self.shortDescription() + "]")

   def tearDown(self):
       """Tear down for test"""
       print("Tear down for [" + self.shortDescription() + "]")
       print("")

   def test_add(self):
       """Add operation test"""
       print("id: " + self.id())
       self.assertEqual(calc.add(1, 2), 3)

   def test_sub(self):
       """Sub operation test"""
       print("id: " + self.id())
       self.assertEqual(calc.sub(4, 2), 2)

   def test_mul(self):
       """Mul operation test"""
       print("id: " + self.id())
       self.assertEqual(calc.mul(2, 5), 10)

   def test_div(self):
       """Div operation test"""
       print("id: " + self.id())
       self.assertEqual(calc.div(8, 4), 2)


if __name__ == '__main__':
   unittest.main()

Запустив это модуль в командной строке:

> python -m unittest -v utest_calc.py
Получим следующий результат:

setUpClass
==========
test_add (simple_ex.CalcTest)
Add operation test ... Set up for [Add operation test]
id: simple_ex.CalcTest.test_add
Tear down for [Add operation test]
ok

test_div (simple_ex.CalcTest)
Div operation test ... Set up for [Div operation test]
id: simple_ex.CalcTest.test_div
Tear down for [Div operation test]
ok

test_mul (simple_ex.CalcTest)
Mul operation test ... Set up for [Mul operation test]
id: simple_ex.CalcTest.test_mul
Tear down for [Mul operation test]
ok

test_sub (simple_ex.CalcTest)
Sub operation test ... Set up for [Sub operation test]
id: simple_ex.CalcTest.test_sub
Tear down for [Sub operation test]
ok
==========
tearDownClass
----------------------------------------------------------------------
Ran 4 tests in 0.016s
OK
==================================
==================================
skipTest(reason)

Данный метод может быть использован для пропуска теста, если это необходимо.

--------------------
набор assert-методов для проверки и генерации ошибок

assertEqual(a, b)	a == b
assertNotEqual(a, b)	a != b
assertTrue(x)	bool(x) is True
assertFalse(x)	bool(x) is False
assertIs(a, b)	a is b
assertIsNot(a, b)	a is not b
assertIsNone(x)	x is None
assertIsNotNone(x)	x is not None
assertIn(a, b)	a in b
assertNotIn(a, b)	a not in b
assertIsInstance(a, b)	isinstance(a, b)
assertNotIsInstance(a, b)	not isinstance(a, b)
Assert’ы для контроля выбрасываемых исключений и warning’ов:

assertRaises(exc, fun, *args, **kwds)	Функция fun(*args, **kwds) вызывает исключение exc
assertRaisesRegex(exc, r, fun, *args, **kwds)	Функция fun(*args, **kwds) вызывает исключение exc, сообщение которого совпадает с регулярным выражением r
assertWarns(warn, fun, *args, **kwds)	Функция fun(*args, **kwds) выдает сообщение warn
assertWarnsRegex(warn, r, fun, *args, **kwds)	Функция fun(*args, **kwds) выдает сообщение warn и оно совпадает с регулярным выражением r
Assert’ы для проверки различных ситуаций:

assertAlmostEqual(a, b)	round(a-b, 7) == 0
assertNotAlmostEqual(a, b)	round(a-b, 7) != 0
assertGreater(a, b)	a > b
assertGreaterEqual(a, b)	a >= b
assertLess(a, b)	a < b
assertLessEqual(a, b)	a <= b
assertRegex(s, r)	r.search(s)
assertNotRegex(s, r)	not r.search(s)
assertCountEqual(a, b)	a и b имеют одинаковые элементы (порядок неважен)
Типо-зависимые assert’ы, которые используются при вызове assertEqual(). Приводятся на тот случай, если необходимо использовать конкретный метод.

assertMultiLineEqual(a, b)	строки (strings)
assertSequenceEqual(a, b)	последовательности (sequences)
assertListEqual(a, b)	списки (lists)
assertTupleEqual(a, b)	кортежи (tuplse)
assertSetEqual(a, b)	множества или неизменяемые множества (frozensets)
assertDictEqual(a, b)	словари (dicts)

=======================================================

