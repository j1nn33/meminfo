# -*- coding: utf-8 -*-
# Описание примера использование базы данных на пракатике
#------------------------
create_sqlite_ver1.py - создать файл БД, подключиться к базе данных и создать таблицу


create_sqlite_ver2.py - сначала парсится вывод в файле dhcp_snooping.txt  регулярными выражениями
                      - а затем записи добавляются в БД 
                      
create_sqlite_ver3.py - создает и проверяет на наличие файл БД, подключиться к базе данных и создать таблицу
                      - парсится вывод в файле dhcp_snooping.txt  регулярными выражениями
                      - создает и проверяет записи в БД
                      
                      
get_data_ver1.py      - занимается отправкой запросов в БД и  выводом результатов

get_data_ver2.py      - занимается отправкой запросов в БД и  выводом результатов


"""    В разделе Регулярные выражения был пример разбора вывода команды show ip dhcp snooping binding. 
На выходе мы получили информацию о параметрах подключенных устройств (interface, IP, MAC, VLAN).
    
    В таком варианте можно посмотреть только все подключенные устройства к
коммутатору. Если же нужно узнать на основании одного из параметров другие, то в
таком виде это не очень удобно.
    
    Например, если нужно по IP-адресу получить информацию о том, к какому интерфейсу
подключен компьютер, какой у него MAC-адрес и в каком он VLAN, то по выводу
скрипта это сделать не очень просто и, главное, не очень удобно.
    
    Запишем информацию, полученную из вывода sh ip dhcp snooping binding в SQLite.
    Это позволит делать запросы по любому параметру и получать недостающие.
    Для этого примера достаточно создать одну таблицу, где будет храниться информация.
    
    Определение таблицы прописано в отдельном файле dhcp_snooping_schema.sql и
выглядит так:
"""
create table if not exists dhcp (
    mac         text not NULL primary key,
    ip          text,
    vlan        text,
    interface   text
);

"""
Для всех полей определен тип данных "текст".
MAC-адрес является первичным ключом нашей таблицы, что вполне логично, так как
MAC-адрес должен быть уникальным.
Кроме того, используется выражение create table if not exists - SQLite создаст
таблицу только в том случае, если она не существует.
Теперь надо создать файл БД, подключиться к базе данных и создать таблицу (файл create_sqlite_ver1.py)
"""

# В результате должен быть создан файл БД и таблица dhcp.
# Проверить, что таблица создалась, можно с помощью утилиты sqlite3, которая
# позволяет выполнять запросы прямо в командной строке.
# Список созданных таблиц выводится таким образом:
# $ sqlite3 dhcp_snooping.db "SELECT name FROM sqlite_master WHERE type='table'"
# dhcp


# Теперь нужно записать информацию из вывода команды sh ip dhcp snooping binding в таблицу (файл dhcp_snooping.txt):

MacAddress         IpAddress       Lease(sec) Type          VLAN Interface
------------------ --------------- ---------- ------------- ---- ----------------
00:09:BB:3D:D6:58  10.1.10.2        86250     dhcp-snooping 10   FastEthernet0/1
00:04:A3:3E:5B:69  10.1.5.2         63951     dhcp-snooping 5    FastEthernet0/10
00:05:B3:7E:9B:60  10.1.5.4         63253     dhcp-snooping 5    FastEthernet0/9
00:09:BC:3F:A6:50  10.1.10.6        76260     dhcp-snooping 10   FastEthernet0/3
Total number of bindings: 4

# Во второй версии скрипта сначала вывод в файле dhcp_snooping.txt обрабатывается
# регулярными выражениями, а затем записи добавляются в БД (файл create_sqlite_ver2.py):


"""
Проверим, что данные записались:
$ sqlite3 dhcp_snooping.db "select * from dhcp"
-- Loading resources from /home/vagrant/.sqliterc
mac ip vlan interface
----------------- ---------- ---------- ---------------
00:09:BB:3D:D6:58 10.1.10.2 10 FastEthernet0/1
00:04:A3:3E:5B:69 10.1.5.2 5 FastEthernet0/10
00:05:B3:7E:9B:60 10.1.5.4 5 FastEthernet0/9
00:09:BC:3F:A6:50 10.1.10.6 10 FastEthernet0/3



Теперь попробуем запросить по определенному параметру:

$ sqlite3 dhcp_snooping.db "select * from dhcp where ip = '10.1.5.2'"

sqlite3 /home/ubuntu/workspace/python/conspect/SQL/example/dhcp_snooping.db "select * from dhcp where ip = '10.1.5.2'"

-- Loading resources from /home/vagrant/.sqliterc
mac               ip         vlan       interface
----------------- ---------- ---------- ----------------
00:04:A3:3E:5B:69 10.1.5.2   5          FastEthernet0/10

То есть, теперь на основании одного параметра можно получать остальные.
Переделаем скрипт таким образом, чтобы в нём была проверка на наличие файла
dhcp_snooping.db. Если файл БД есть, то не надо создавать таблицу, считаем, что она
уже создана.
Файл create_sqlite_ver3.py:

проверки см в конце файла  create_sqlite_ver3.py
- Проверим. В случае, если файл уже есть, но данные не записаны
- Если есть и БД и данные:

"""
# Теперь делаем отдельный скрипт, который занимается отправкой запросов в БД и
# выводом результатов. Он должен:
# ожидать от пользователя ввода параметров:
# - имя параметра
# - значение параметра
# делать нормальный вывод данных по запросу
# Файл get_data_ver1.py:
"""
Проверим работу скрипта.  см сам скрипт 

Показать параметры хоста с IP 10.1.10.2:

Показать хосты в VLAN 10:

"""

"""
Вторая версия скрипта для получения данных с небольшими улучшениями:
Вместо форматирования строк используется словарь, в котором описаны запросы,
соответствующие каждому ключу.
Выполняется проверка ключа, который был выбран
Для получения заголовков всех столбцов, который соответствуют запросу,
используется метод keys()
Файл get_data_ver2.py

В этом скрипте есть несколько недостатков:
не проверяется количество аргументов, которые передаются скрипту
хотелось бы собирать информацию с разных коммутаторов. А для этого надо
добавить поле, которое указывает, на каком коммутаторе была найдена запись
"""

