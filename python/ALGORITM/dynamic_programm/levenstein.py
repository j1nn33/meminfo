# Расстояние Левенштейна (редакционное расстояние) между стороками
"""
A = "колокол"  N
В = "молоко"   M
сколько типографический ошибок нужно совершить в А 
чтобы получить В
1 - перепутали символ
2 - вставили лишний символ
3 - потеряли нужный
найти кратчайшеее расстояние 

решение
Fij - минимальная редакционная правка 
между срезами срок A[:i] , B[:j]
Ответ Fnm - ответ

рекурентый случай
1 последний символ один и тот же  - F(i-1)(j-1)
2 если полседние символы разные, то анализирум на ошибки
и берем из них минимум
     1 +min(F(i-1)j, Fi(j-1),F(i-1)(j-1))
3 крайний случай - строка пустая
   F0j=j, Fi0=i  F00=0  
"""
def levenstein(A,B):
    # анализ на крайний случай каждой пары  
    #  i+j если i*j равен 0 иначе 0 
    F=[[(i+j) if i*j==0 else 0 for j in range(len(B)+1)]
         for i in range(len(A)+1)]
    # пробегаемся по двумерному массиву
    for i in range(1, len(A)+1):
        for j in range(1, len(B)+1):
            if A[i-1] == B[j-1]:
                F[i][j] = F[i-1][j-1]
            else:
                 F[i][j] = 1 + min (F[i-1][j], F[i][j-1], F[i-1][j-1])
   
    # в последнем элементе будет ответ который возвращаем 
    return F[len(A)][len(B)]  





A = "кол"
B = "мо"

print ('наименьшее общее редакуионного расстояние', levenstein(A,B))