=============  Магазин на Django ===============
================================================
https://www.youtube.com/watch?v=WBfKmwsu7eE&list=PLp_WN118C-VdgBKf_ATbvGI1xX06dZkmF&index=2

============ Установка и создание прокта =======

1 Создание проекта в папке magazin
cd ./magazin

создание виртуального окружениея eComEnv
python -m venv eComEnv

активация виртуаьлного окружения source eComEnv/bin/activate
source eComEnv/bin/activate		(Linux)
или 
eComEnv\Scripts\activate		(Windows)

установка django 
pip install django

=========== Создание прокта и Настройка ========

создание проекта
django-admin.py startproject djangoshop
cd ./djangoshop

settings.py
-----------------------------
LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Europe/Moscow'

-----------------------------

=========== Запуск ===========================

./manage.py makemigrations
./manage.py migrate
./manage.py createsuperuser
./manage.py runserver

========== STATIC FILES=======================

settings.py
-----------------------------

STATIC_URL = '/static/'											# доступность станики по url
STATIC_ROOT = os.path.join(BASE_DIR, 'static')                  # где лежат 

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static_in_dev'),
)

-----------------------------
Созданние каталогов

<projectName>static
<projectName>media
<projectName>static_in_dev


скачать bootstarap и поместить в static_in_dev
./manage.py collectstatic


<projectName><projectName>urls.py
-----------------------------
from django.conf.urls.static import static
from django.conf import settings


if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
-----------------------------


=========== Создание приложения и Настройка ==

./manage.py startapp ecomapp

settings.py
-----------------------------
INSTALLED_APPS =[
    'ecomapp',
]

-----------------------------

Создаем

<appNAME>template
<appNAME>/templates/base.html

base.html
-----------------------------
<!DOCTYPE html>
<HTML>
   <HEAD>
      <TITLE> </TITLE>
   </HEAD>
<BODY>
<h1> hello world</h1>
</BODY>
</HTML>
-----------------------------

views.py
-----------------------------

def hello_wold(request):
    return render(request, 'base.html',{})
-----------------------------

<projectName><projectName>urls.py
-----------------------------
from ecomapp.views import hello_wold


path('', hello_wold, name='base'),
-----------------------------

Проверка работы bootstrap

base.html
-----------------------------
{% load staticfiles %}
<!DOCTYPE html>
<HTML>
   <HEAD>
      <TITLE>Calculate</TITLE>
      
      <link href="{% static "css/bootstrap.css" %}" rel="stylesheet">
      <script src="{% static "js/bootstrap.js" %}"></script> 
   </HEAD>
<BODY>
<h1> hello world</h1>
</BODY>
</HTML>
-----------------------------

============== MODEL =======================

<appNAME>models.py
-----------------------------
class Category(models.Model):

    name = models.CharField(max_length=100)
    slug = models.SlugField()

     def __str__(self):
        return self.name
-----------------------------

<appNAME>admin.py
-----------------------------
from ecomapp.models import Category
-----------------------------

(Дальнейшие измения в модели и admin.py см в код)

./manage.py makemigrations
./manage.py migrate
./manage.py runserver

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
					TIPS
|||||||||||||||||||||||||||||||||||||||||||
========= Хранение изображений ============

<projectName>/product_images   здесь храняться изображения 

*.png

- для нормального имение файла

models.py

--------------------------

def image_folder(instance, filename):
    """ для нормального имени при загружке изображения  nameslug/nameslug.png """
    filename = instance.slug + '.' + filename.split('.')[1]
    return "{0}/{1}".format(instance.slug, filename)


class Product(models.Model):
   
    image = models.ImageField(upload_to=image_folder)
    
--------------------------

========= SLUG ============
pip install transliterate

models.py
--------------------------

from django.db.models.signals import pre_save
from django.utils.text import slugify
from transliterate import translit


def pre_save_category_slug(sender, instance, *args, **kwargs):
    if not instance.slug:
        slug = slugify(translit(instance.name, reversed=True))
        instance.slug = slug

pre_save.connect(pre_save_category_slug, sender=Category)


--------------------------

===========Выдача данных в шаблон=========

<projectNAME>/urls.py
--------------------------
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('ecomapp.urls')),
]

--------------------------
<appNAME>/urls.py
--------------------------
from django.urls import path
from ecomapp.views import base_view


urlpatterns = [
    path('', base_view, name='base'),
]
--------------------------
<appNAME>/views.py
--------------------------
from django.shortcuts import render

def base_view(request):
    return render(request, 'base.html',{})
--------------------------

=========== Подгрузка шаблона ===========

https://startbootstrap.com/templates/shop-homepage/

index.html  to base.html  + modify
{% load staticfiles %}
     
      <link href="{% static "css/bootstrap.css" %}" rel="stylesheet">
      <script src="{% static "js/bootstrap.js" %}"></script> 


1. Разархивировать файл.
2. Добавить содержимое файла index.html в base.html
3. Из папки css скопировать файл shop-homepage.css в папку static_in_dev/css, а также файл vendor/jquery/jquery.js в папку static_in_dev/js
4. Прописать команду ./manage.py collectstatic
5. Перейти в файл base.html
6. Вверху файла, до doctype, добавить {% load static %}
7. Заменить ссылки на css и js на следующие:
  <link href="{% static "css/bootstrap.css" %}" rel="stylesheet">
  <link  href="{% static "css/shop-homepage.css" %}" rel="stylesheet" 

И внизу файла

  <script src="{% static "js/bootstrap.js" %}"></script>
  <script src="{% static "js/jquery.js" %}"></script>
------------------------------------

<appNAME>/views.py

------------------------------------
from django.shortcuts import render
from ecomapp.models import Category, Product


def base_view(request):

    categories = Category.objects.all()
    products = Product.objects.all()
    context = {
        'categories': categories,
        'products': products,
    }
    return render(request, 'base.html',context)
------------------------------------

================ Фильтрация данных в шаблоне====
скрываем те товары у которых поле available = false

переобпределяем стандартный класс  objects (по умолчанию он выводит все)
================================================
models.py
-----------------------------------

class ProductManager(models.Manager):

    def all(self, *args, **kwargs):
        return super(ProductManager, self).get_queryset().filter(available=True)


class Product(models.Model):
    category = models.ForeignKey('Category', on_delete=models.CASCADE, null=True, blank=True)    # один товар имеет одну категорию
    brand = models.ForeignKey('Brand', on_delete=models.CASCADE, null=True, blank=True)
    title = models.CharField(max_length=120)
    slug = models.SlugField(blank=True)
    description = models.TextField()
    image = models.ImageField(upload_to=image_folder)
    price = models.DecimalField(max_digits=9, decimal_places=2)
    available = models.BooleanField(default=True)
    objects = ProductManager()

    def __str__(self):
        return self.title

-----------------------------------

=========== Создание ссылок на категрии и товары =====
models.py
-----------------------------------
from django.urls import reverse


class Category(models.Model):
*******************
    def get_absolute_url(self):
        return reverse("category_detail", kwargs={"category_slug": self.slug})    


class Product(models.Model):
*******************
    def get_absolute_url(self):
        return reverse("product_detail", kwargs={"product_slug": self.slug})
    

-----------------------------------

views.py
-----------------------------------

-----------------------------------
и создаем шаблон html на страницу с описанием продукта и категории
<appNAME>/templates/product.html
<appNAME>/templates/category.html
category.html
------------------------------------
{% extends 'base.html' %}

{% block content %}

{% endblock content %}
------------------------------------
#  страница наследует все что есть в  base.html
#    но вырезает все что находится между блоками 
#    {% block content %}
#    {% endblock content %}
#     в  base.html


<appNAME>urls.py
-----------------------------------
from ecomapp.views import base_view, category_view, product_view


urlpatterns = [
    #path('category/<int:pk>/', category_view, name='category_detail'),
    #path('product/<int:pk>/', product_view, name='product_detail'),
    path('category/<category_slug>/', category_view, name='category_detail'),
    path('product/<product_slug>/', product_view, name='product_detail'),
    
    path('', base_view, name='base'),
]


-----------------------------------
base.html

<a href="{{ category.get_absolute_url }}" class="list-group-item">{{ category.name }}</a>
<a href="{{ product.get_absolute_url }}">{{ product.title }}</a>

==================================================================
Отображаем информацию о товарах и категориях
 см 
<appNAME>/templates/product.html

<appNAME>/templates/category.html

views.py

----------------------------
def category_view(request, category_slug):
    """ для работы ссылок на категрии """
    category = Category.objects.get(slug=category_slug)
    product_of_category = category.product_set.all()
    context = {
        'category': category,
        'product_of_category': product_of_category,
    }
    return render(request, 'category.html', context)
----------------------------

==================================================================
Добавляем навигацию 

<appNAME>/templates/base.html

bootstarap/components/navbar  dropdown
----------------------------
{% if not request.get_full_path == '/' %}     <!-- не поаказыать выпадающее меню на главной странице-->
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              Категории
            </a> 
            <div class="dropdown-menu" aria-labelledby="navbarDropdown">
               
               {% for category in categories %}
               <a class="dropdown-item" href="{{ category.get_absolute_url }}" class="list-group-item">{{ category.name }}</a>
               {% endfor %}
              
            </div>
          </li>
{% endif %}

----------------------------


views.py
----------------------------
def product_view(request, product_slug):
    """ для работы ссылок на каждый  продукт """
    categories = Category.objects.all()    # для отображения в меню dropdowm base.html
    product = Product.objects.get(slug=product_slug)
    context = {
        'product': product,
        'categories': categories,
    }
    return render(request, 'product.html', context)

def category_view(request, category_slug):
    """ для работы ссылок на категрии """
    categories = Category.objects.all()    # для отображения в меню dropdowm base.html
    category = Category.objects.get(slug=category_slug)
    product_of_category = Product.objects.filter(category=category)
    context = {
        'category': category,
        'product_of_category': product_of_category,
        'categories': categories,
    }
    return render(request, 'category.html', context)

----------------------------

=====================================================================
делаем листающие картинки на главном меню
base.html

=====================================================================
делаем КОРЗИНУ

по архитектурным прчинам (добавление удаление продукта из корзины создаем дополнительный класс)

models.py
----------------------------
class CartItem(models.Model):
    """модель продукта в корзине"""
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    qty = models.PositiveIntegerField(default=1)                                      # количество товара 
    item_total = models.DecimalField(max_digits=9, decimal_places=2, default=0.00)    # для изменения количества товара в корзине

    def __str__(self):
       return "Cart item for product {0}".format(self.product.title)

class Cart(models.Model):
    """Модель корзины"""
    items = models.ManyToManyField(CartItem, blank=True)
    cart_total = models.DecimalField(max_digits=9, decimal_places=2, default =0.00)   # итоговая суммаа
    
    def __str__(self):
       return str(self.id)


----------------------------

views.py
----------------------------
def cart_view(request):
    cart = Cart.objects.first()
    context = {
        'cart' : cart,
    }
    return render(request, 'cart.html', context)

----------------------------

cart.html
urls.py
-------------
path('cart/', cart_view, name='cart'),
-------------

----------------------------------
сделать количество товаров у меню корзины в виде напоминалки

base.html
  <a class="nav-link" href=" {% url "cart" %} ">Корзина <span class='badge badge-light'> {{ cart.items.count }} </span></a>

views.py
----------------------------------
def base_view(request):
    cart = Cart.objects.first()
    categories = Category.objects.all()
    products = Product.objects.all()
    context = {
        'cart' : cart,
        'categories': categories,
        'products': products,
    }
    return render(request, 'base.html',context)
----------------------------------

делаем чтобы по кнопке Добавить в корзину товар помещался в корзину
(пример как принцип работы)

views.py
----------------------------------
from django.http import HttpResponseRedirect

def add_to_cart_view(request, produkt_slug):
    """ добавление товара в корзину"""
    product = Product.objects.get(slug=produkt_slug)
    new_item, _ = CartItem.objects.get_or_create(product=product, item_total=product.price)
    # new_item, _ так как метод отдает кортеж типа двойное присваивание
    cart = Cart.objects.first()
    if new_item not in cart.items.all():
        cart.items.add(new_item)
        cart.save()
        return HttpResponseRedirect ('/cart/')
----------------------------------

urls.py
-------------
path('add_to_cart/<product_slug>/', add_to_cart_view, name='add_to_cart'),
-------------

product.html
-------------
  <a href="{% url "add_to_cart" product_slug=product.slug %}"><button class="btn btn-danger"> Добавить в корзину </button></a>
-------------

====================================================================
соаздание корзин для каждого пользователя (корректировка того примера что была)

- удаляем из из view.py (cart = Cart.objects.first()) 
и заменяем их на 
    
---------------------------
  try:
        cart_id = request.session['cart_id']  # присваеиваем значение которое есть в сессиях по ключу  cart_id т.е когда корзина уже создана
        cart = Cart.objects.get(id=cart_id)   # для бейджика на меню корзины  (берем корзину которая существует по этому cart_id)
        request.session['total'] = cart.items.count() # в сессии создаем значение соответсвующее количеству товаров 
    except:                 
        cart = Cart()                 # создание новой корзины
        cart.save()
        cart_id=cart.id 
        request.session['cart_id'] = cart_id    # записываем в сессию cart_id нашей вновь созданой корзины
        cart = Cart.objects.get(id=cart_id)   # для бейджика на меню корзины  (берем корзину которая существует по этому cart_id)

----------------------------
===============================================================
удаляем товар из корзины
Преносим функции добалвения удалениая товара из корзины и измения количества товара из views.py в models.py
(те засовываем эти функции в класс корзины)

models.py
----------------------------------
from decimal import Decimal

class Cart(models.Model):
    """Модель корзины"""
    items = models.ManyToManyField(CartItem, blank=True)
    cart_total = models.DecimalField(max_digits=9, decimal_places=2, default =0.00)   # итоговая суммаа
    
    def __str__(self):
       return str(self.id)

    def add_to_cart(self, product_slug):
        cart = self
        product = Product.objects.get(slug=product_slug)
        new_item, _ = CartItem.objects.get_or_create(product=product, item_total=product.price)
        # new_item, _ так как метод отдает кортеж типа двойное присваивание
        cart_items = [item.product for item in cart.items.all()]
        if new_item.product not in cart_items:
            cart.items.add(new_item)
            cart.save()

    # логика: проверяем наличие продукта в козине и если он есть то удаляем его 
    def remove_from_cart(self, product_slug):
        cart = self
        product = Product.objects.get(slug=product_slug)
        for cart_item in cart.items.all():
            if cart_item.product == product:
                cart.items.remove(cart_item)
                cart.save()

    def change_qty(self, qty, item_id):
        cart = self
        cart_item = CartItem.objects.get(id=int(item_id))
        cart_item.qty = int(qty)
        cart_item.item_total = int(qty) * Decimal(cart_item.product.price)
        cart_item.save()
        new_cart_total = 0.00
        for item in cart.items.all():
            new_cart_total += float(item.item_total)
        cart.cart_total = new_cart_total
        cart.save()


----------------------------------

views.py
----------------------------------

def add_to_cart_view(request):
    """ добавление товара в корзину """
    
    try:
        cart_id = request.session['cart_id']
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины
        request.session['total'] = cart.items.count()
    except:
        cart = Cart()
        cart.save()
        cart_id=cart.id 
        request.session['cart_id'] = cart_id
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины

    product_slug = request.GET.get('product_slug')
    product = Product.objects.get(slug=product_slug)
    cart.add_to_cart(product.slug)               # вызов функции которую добавили в класс
    new_cart_total = 0.00
    for item in cart.items.all():
	    new_cart_total += float(item.item_total)
    cart.cart_total = new_cart_total
    cart.save()
    return JsonResponse({'cart_total': cart.items.count(), 'cart_total_price': cart.cart_total})

    # \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    # все это перенесено в класс корзины models.py
    #product_slug = request.GET.get('product_slug')
    #product = Product.objects.get(slug=product_slug)
    #new_item, _ = CartItem.objects.get_or_create(product=product, item_total=product.price)
    # new_item, _ так как метод отдает кортеж типа двойное присваивание
    #if new_item not in cart.items.all():
    #    cart.items.add(new_item)
    #    cart.save()
    #    return JsonResponse({'cart_total': cart.items.count()})
    # \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  
def remove_from_cart_view(request):
    """ удаление товара в корзину """
    
    try:
        cart_id = request.session['cart_id']
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины
        request.session['total'] = cart.items.count()
    except:
        cart = Cart()
        cart.save()
        cart_id=cart.id 
        request.session['cart_id'] = cart_id
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины

    product_slug = request.GET.get('product_slug')
    product = Product.objects.get(slug=product_slug)
    cart.remove_from_cart(product.slug)          # вызов функции которую добавили в класс
    new_cart_total = 0.00
    for item in cart.items.all():
        new_cart_total += float(item.item_total)
    cart.cart_total = new_cart_total
    cart.save()
    return JsonResponse({'cart_total': cart.items.count(), 'cart_total_price': cart.cart_total})
    
    # \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    # все это перенесено в класс корзины models.py
    # логика: проверяем наличие продукта в козине и если он есть то удаляем его
    #for cart_item in cart.items.all():
    #    if cart_item.product == product:
    #        cart.items.remove(cart_item)
    #        cart.save()
    #        return JsonResponse({'cart_total': cart.items.count()})
    # \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
----------------------------------

urls.py
-------------
path('remove_from_cart/<product_slug>/', remove_from_cart_view, name='remove_from_cart'),
-------------


cart.html
-------------
  <td class='text-center'><a href="{% url "remove_from_cart" product_slug=item.product.slug %}"><button class="btn btn-danger"> Удалить из корзины </button></a></td>
-------------
==========================================================
 Динамическое добавление товара в корзину
(те при добавлении товара перезагрузка страницы проходить не будет, будет просто увеличиваться счетчик)
product.html

проверка работы javascript 
<script>
    alert('hi')
</script>

product.html   # ( тестирование) в консоле браузера будет печататься slug прдукта 
если тестирование не проходит то смотреть в сторону отработки jquery скриптов
----------------------------------
 <a href="{% url "add_to_cart" product_slug=product.slug %}" class='add_to_cart' data-slug='{{ product.slug }}'><button class="btn btn-danger"> Добавить в корзину </button></a>
<script>
    $(document).ready(function(){
        $('.add_to_cart').on('click', function(e){
          e.preventDefault()
          product_slug = $(this).attr('data-slug')
          console.log(product_slug)
        })
    })
    
</script>

----------------------------------

product.html
----------------------------------

<a href="#" class='add_to_cart' data-slug='{{ product.slug }}'><button class="btn btn-danger"> Добавить в корзину </button></a>

<script>
$(document).ready(function(){
	$('.add_to_cart').on('click', function(e){
		e.preventDefault()
		product_slug = $(this).attr('data-slug')
		data = {
			product_slug: product_slug
		}
		$.ajax({
			type: "GET",
			url: '{% url "add_to_cart" %}',
			data: data,
			success: function(data){
				$("#cart_count").html(data.cart_total)
			}
		})
	})
})
</script>

----------------------------------

views.py
----------------------------------
from django.http import HttpResponseRedirect, JsonResponse


def add_to_cart_view(request):      product_slug уже не нужен
    product_slug = request.GET.get('product_slug')
    return JsonResponse({'cart_total': cart.items.count()})

def remove_from_cart_view(request):
    product_slug = request.GET.get('product_slug')
    return JsonResponse({'cart_total': cart.items.count()})
----------------------------------

urls.py
----------------------------------
 path('add_to_cart/', add_to_cart_view, name='add_to_cart'),
 path('remove_from_cart/', remove_from_cart_view, name='remove_from_cart'),     
----------------------------------

base.html
----------------------------------
<a class="nav-link" href=" {% url "cart" %} ">Корзина <span class='badge  badge-danger' id='cart_count'> {{ cart.items.count }} </span></a> 
----------------------------------

cart.html
----------------------------------
 <td class='text-center'><a href="{% url "remove_from_cart" %}"><button class="btn btn-danger"> Удалить из корзины </button></a></td>
----------------------------------
==========================================================
 Динамическое удаление товара в корзину

 cart.html
----------------------------------
<tr class='cart-item'-{{ item.product.id }}>
  <td class='text-center'><a href="#" class='remove_from_cart' data-slug='{{ item.product.slug }}' data-id='{{ item.product.id }}'><button class="btn btn-danger"> Удалить из корзины </button></a></td>

<script>
$(document).ready(function(){
	$('.remove_from_cart').on('click', function(e){
		e.preventDefault()
		product_slug = $(this).attr('data-slug')
		//  console.log(product_slug)   для тестирования 
        item_product_id = $(this).attr('data-id')
       
        data = {
			product_slug: product_slug
		}
		$.ajax({
			type: "GET",
			url: '{% url "remove_from_cart" %}',
			data: data,
			success: function(data){
				$("#cart_count").html(data.cart_total)
                $('.cart-item-'+item_product_id).css('display', 'none') 
               
			}
		})
	})
})
</script>
----------------------------------
==========================================================
 Динамическое изменение кол-ва товара в корзине 

удаляем из cart.html

<td class='text-center'>{{ item.qty }}</td>


 cart.html
----------------------------------
<td class='text-center'>
        <from action='' method='GET'>
            <input type='number' name='qty' class='cart-item-qty' data-id='{{ item.id }}' value='{{ item.qty }}' min='1' style='width:50px;'>
        </from>
</td>


<td class='text-center' id='cart-item-total-{{ item.id }}'>{{ item.item_total }} руб.</td>

<script>
------------

$(document).ready(function(){
	$('.cart-item-qty').on('click', function(){
		qty = $(this).val()
		item_id = $(this).attr('data-id')
		data = {
			qty: qty,
			item_id: item_id
		}
		$.ajax({
			type: "GET",
			url: '{% url "change_item_qty" %}',
			data: data,
			success: function(data){
				$('#cart-item-total-'+item_id).html(parseFloat(data.item_total).toFixed(2) + ' руб.')
				$('#cart-total-price').html('<strong>' + parseFloat(data.cart_total_price).toFixed(2) + ' руб. </strong>')
				

			}
		})
	})
})

</script>
----------------------------------
views.py
----------------------------------
from decimal import Decimal

def change_item_qty(request):
    try:
        cart_id = request.session['cart_id']
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины
        request.session['total'] = cart.items.count()
    except:
        cart = Cart()
        cart.save()
        cart_id=cart.id 
        request.session['cart_id'] = cart_id
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины
    
    qty = request.GET.get('qty')
    item_id = request.GET.get('item_id')
    cart_item = CartItem.objects.get(id=int(item_id))
    cart_item.qty = int(qty)
    cart_item.item_total = int(qty) * Decimal(cart_item.product.price)
    cart_item.save
    return JsonResponse({'cart_total': cart.items.count(), 'item_total': cart_item.item_total})

----------------------------------

urls.py
----------------------------------
from ecomapp.views import base_view, category_view, product_view, cart_view, add_to_cart_view, remove_from_cart_view, change_item_qty
path('change_item_qty/', change_item_qty, name='change_item_qty'),
----------------------------------

==========================================================
Расчет итога корзины

cart.html
----------------------------------
<tr>
    <td></td>
    <td class='text-center'><strong> Итого :  </strong></td>
    <td class='text-center' id='cart-total-price'><strong>{{ cart.cart_total }} руб.</strong></td>
    
    <td></td>
</tr>

<script>
$(document).ready(function(){
	$('.remove_from_cart').on('click', function(e){
		e.preventDefault()
		product_slug = $(this).attr('data-slug')
		//  console.log(product_slug)   для тестирования 
        item_product_id = $(this).attr('data-id')
       
        data = {
			product_slug: product_slug
		}
		$.ajax({
			type: "GET",
			url: '{% url "remove_from_cart" %}',
			data: data,
			success: function(data){
				$("#cart_count").html(data.cart_total)
                $('.cart-item-'+item_product_id).css('display', 'none')
				$('#cart-total-price').html('<strong>' + parseFloat(data.cart_total_price).toFixed(2) + ' руб. </strong>')
				if(parseInt(data.cart_total) == 0){
				        $('.my-cart').css('display', 'none')
				        $('.cart-empty').css('display', 'block')
				        $('.cart-empty').html('<h3 class="text-center">Ваша корзина пуста</h3>')
				}
			}
		})
	})
})

$(document).ready(function(){
	$('.cart-item-qty').on('click', function(){
		qty = $(this).val()
		item_id = $(this).attr('data-id')
		//console.log(qty)
		//console.log(item_id)
		data = {
			qty: qty,
			item_id: item_id
		}
		$.ajax({
			type: "GET",
			url: '{% url "change_item_qty" %}',
			data: data,
			success: function(data){
				$('#cart-item-total-'+item_id).html(parseFloat(data.item_total).toFixed(2) + ' руб.')
				$('#cart-total-price').html('<strong>' + parseFloat(data.cart_total_price).toFixed(2) + ' руб. </strong>')
			}
		})
	})
})
</script>

----------------------------------
=======================================================
Для изменения итоговой стоимости 

views.py
----------------------------------
def add_to_cart_view(request):
    """ добавление товара в корзину """
    
    try:
        cart_id = request.session['cart_id']
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины
        request.session['total'] = cart.items.count()
    except:
        cart = Cart()
        cart.save()
        cart_id=cart.id 
        request.session['cart_id'] = cart_id
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины

    product_slug = request.GET.get('product_slug')
    product = Product.objects.get(slug=product_slug)
    cart.add_to_cart(product.slug)
    new_cart_total = 0.00
    for item in cart.items.all():
	    new_cart_total += float(item.item_total)
    cart.cart_total = new_cart_total
    cart.save()
    return JsonResponse({'cart_total': cart.items.count(), 'cart_total_price': cart.cart_total})

def remove_from_cart_view(request):
    """ удаление товара в корзину """
    
    try:
        cart_id = request.session['cart_id']
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины
        request.session['total'] = cart.items.count()
    except:
        cart = Cart()
        cart.save()
        cart_id=cart.id 
        request.session['cart_id'] = cart_id
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины

    product_slug = request.GET.get('product_slug')
    product = Product.objects.get(slug=product_slug)
    cart.remove_from_cart(product.slug)
    new_cart_total = 0.00
    for item in cart.items.all():
        new_cart_total += float(item.item_total)
    cart.cart_total = new_cart_total
    cart.save()
    return JsonResponse({'cart_total': cart.items.count(), 'cart_total_price': cart.cart_total})
def change_item_qty(request):
	try:
		cart_id = request.session['cart_id']
		cart = Cart.objects.get(id=cart_id)
		request.session['total'] = cart.items.count()
	except:
		cart = Cart()
		cart.save()
		cart_id = cart.id
		request.session['cart_id'] = cart_id
		cart = Cart.objects.get(id=cart_id)
	qty = request.GET.get('qty')
	item_id = request.GET.get('item_id')
	cart.change_qty(qty, item_id)
	cart_item = CartItem.objects.get(id=int(item_id))
	return JsonResponse(
		{'cart_total': cart.items.count(), 
		'item_total': cart_item.item_total,
		'cart_total_price': cart.cart_total})



----------------------------------
===========================================
==== Уведомления ==========================
создем статусы заказа 

models.py 

----------------------
from django.conf import settings


ORDER_STATUS_CHOICES = (
	('Принят в обработку', 'Принят в обработку'),
	('Выполняется', 'Выполняется'),
	('Оплачен', 'Оплачен')
)

class Order(models.Model):

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    items = models.ManyToManyField(Cart)
    total = models.DecimalField(max_digits=9, decimal_places=2, default=0.00)
    first_name = models.CharField(max_length=200)
    last_name = models.CharField(max_length=200)
    phone =  models.CharField(max_length=20)
    address = models.CharField(max_length=255)
    buying_type =  models.CharField (max_length=40, choices=(('Самовывоз', 'Самовывоз'), ('Доставка','Доставка')))
    date = models.DateField(auto_now=True)
    comments = models.TextField()
    status = models.CharField(max_length=100, choices=ORDER_STATUS_CHOICES)
    
    def __str__(self):
       return "Заказ № {0}".format(str(self.id))
----------------------

Чекаут заказа

checkout.html
--------------------
см. исходники
--------------------

доплняем views.py
--------------------

def checkout_view(request):
    try:
        cart_id = request.session['cart_id']
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины
        request.session['total'] = cart.items.count()
    except:
        cart = Cart()
        cart.save()
        cart_id=cart.id 
        request.session['cart_id'] = cart_id
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины
    
    context = {
        'cart': cart
    }
    return render(request, 'checkout.html', context)
  
--------------------

urls.py
--------------------
path('checkout/', checkout_view, name='checkout'),
--------------------

===========================================================
Создаем шаблон и форму для заказа  (куда пользователь заносить свои данные)

создаем файл 
<appName>forms.py

--------------------

--------------------

order.html
--------------------

--------------------

views.py
--------------------
from ecomapp.forms import OrderForm

def order_create_view(request):
    try:
        cart_id = request.session['cart_id']
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины
        request.session['total'] = cart.items.count()
    except:
        cart = Cart()
        cart.save()
        cart_id=cart.id 
        request.session['cart_id'] = cart_id
        cart = Cart.objects.get(id=cart_id)      # для бейджика на меню корзины
    form = OrderForm(request.POST or None)
    context = {
        'form': form
    }
    return render(request, 'order.html', context)

--------------------

url.py
--------------------
--------------------
======================================
Отображаем форму для заказа
1 устанавливаем библиотеку 
pip install django-crispy-forms   приводит все формы к стилю bootstrap

settings.py
--------------------
INSTALLED_APPS = [
    
    'crispy_forms',
    
]

CRISPY_TEMPLATE_PACK = 'bootstrap3'
--------------------

order.html
--------------------

{% extends 'base.html' %}
{% load static %}
{% load crispy_forms_tags %}

{% block content %}

<form actiom='' method='POST'>
    <!--{{ form|crispy }} вывод формы методами crispy -->   
    <!-- внизу кастомный вывод формы -->
   <br>
   <div class="row"> 
   <div class='col-sm-4'>
       {{ form.name|as_crispy_field }}
   </div>
   <div class='col-sm-4'>
       {{ form.last_name|as_crispy_field }}
   </div>
   <div class='col-sm-4'>
       {{ form.phone|as_crispy_field }}
   </div>
   </div> 
   
  
   <div class="row"> 
   <div class='col-sm-4'>
       {{ form.buying_type|as_crispy_field }}
   </div>
   <div class='col-sm-4'>
       {{ form.date|as_crispy_field }}
   </div>
   </div> 
   {{ form.address|as_crispy_field }}
   {{ form.comments|as_crispy_field }}
</form>
<p class='text-center'> <input type='submit'class="btn btn-success" value='Оформить заказ'></p>
<!--логика скрипта скрыть адрес доставки если выбран самовывоз -->
<script src="{% static 'js/jquery.js' %}"></script>
<script>

	$(document).ready(function(){
		$('#div_id_address').css('display', 'none')  // строка с адресом по умолчанию скрыта
		$('#id_buying_type').on('click', function(){
            //id_buying_type , значения value delivery - можно посмотреть если открыть инспетор элементов в инструментах разработчика браузера
			buying_type = $(this).val()
            //console.log(buying_type)
			if(buying_type == 'delivery'){
				$('#div_id_address').css('display', 'block')  // строка с адресом становиться видимой
			}else{
				$('#div_id_address').css('display', 'none')
			}
		})
        // тюнинг полей дары 
		$('#id_date_month').css('width', '130px')
		$('#id_date_month').css('display', 'inline')
		$('#id_date_year').css('width', '100px')
		$('#id_date_year').css('display', 'inline')
		$('#id_date_day').css('width', '70px')
		$('#id_date_day').css('display', 'inline')
	})
</script>

{% endblock content %}

--------------------

============================================================
 Шаблон личного кабинета и отображаем информацию о заказах
============================================================

account.html

добавляем views.py
def account_view(request):

urls.py


============================================================
ФОРМА РЕГИСТРАЦИИ
============================================================

forms.py  registration
добавляем views.py
def registration_view(request):

registration.html


urls.py


============================================================
ФОРМА по которой сможет войти в систему
============================================================

forms.py LoginForm
добавляем views.py
def login_view(request):

login.html


urls.py
from django.urls import reverse_lazy
from django.contrib.auth.views import LogoutView


path('login/', login_view, name='login'),
path('logout/', LogoutView.as_view(next_page=reverse_lazy('base')), name='logout'),


=======================================================
Детали заказа
=======================================================
bootstrap / modal / Модальное окно




	<!-- {% for order_item in item.items.items.all %} -->




{% for item in order %}
<div class="modal fade" id="myModal-{{ item.id }}" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <!-- крестик сверху заказа -->
        <!--<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>-->
        <h4 class="modal-title" id="myModalLabel">Заказ № {{ item.id }}</h4>
      </div>
      <div class="modal-body">
      <h3>Товар</h3>
        <table class='table'>
            <!-- выборка товара из  заказа --> 
				
        	{% for order_item in item.items.all %}
					{% for ord_item in order_item.items.all %}
					 	<tr>
						  
	       			<td>{{ ord_item.product.title }}</td>
	       			<td>{{ ord_item.qty }} шт.</td>
	       			<td>{{ ord_item.item_total }} руб.</td>
	        	</tr>

          {% endfor %}

        	{% endfor %}
					
        		 <tr>
	        		<td></td>
	        		<td>Итого</td>
	        		<td><strong> <!--{{ item.items.cart_total }}-->{{ item.total }} руб.</strong></td>
	        	</tr>
        </table>
			
   		<h3>Заказчик</h3>
   		 <p>Имя: {{ item.first_name }}</p>
   		 <p>Фамилия: {{ item.last_name }}</p>
   		 <p>Телефон: {{ item.phone }}</p>
   		 <h3>Тип доставки</h3>
   		 <p>{% if item.buying_type == 'self' %} Самовывоз {% else %}Доставка{% endif %}</p>
   		 <p>{% if item.buying_type == 'delivery' %} {{ item.address }}{% endif %}</p>
   		 <h3>Комментарии к заказу</h3>
   		 <p>{{ item.comments }}</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-dismiss="modal">Закрыть</button>
      </div>
    </div>
  </div>
</div>
{% endfor %}	

================================================================
нотификации (уведомления)
(алгоритм работы при отсутвии товара в магазине будет не кнопка добавить товар в корзину, 
а кнопка уведомить при поступлении) 
1 пользователь нажимает кнопку " уведомить при поступлкнии"
2 создаем в базе данных промежуточную нотификацию
  - пользователь
  - товар
  - флаг о доставленной нотификации пока товара нет флаг находиться в значении false
3 в модели Product заменяем значение available на True (товар появился на складе)
в модели сработает post_save сигнал (для работы нотификаций)
4 меняется флаг о доставлниее нотифкации на True
5 удаление промежуточной нотификации  (того как она будет доставлена пользователю и он ее увидел и прочитал)
(берем объект промежуточной нотификации по пользователю, товару и флагу в значении  True) 


батарейка нотификатионс 
https://github.com/django-notifications/django-notifications


Actor - где нотификации работают - наш продукт

Verb - текст который раскрвает суть ноификации  (товар поступил на склад )

Установка и настойка

pip install django-notifications-hq

INSTALLED_APPS = (
    'django.contrib.auth',
    ...
    'notifications',
    ...
)

import notifications.urls

urlpatterns = [
    ...
    url('^inbox/notifications/', include(notifications.urls, namespace='notifications')),
    ...
]

------------------------------------------------------------------
принцип работы (генерации нотификации)

Generating notifications is probably best done in a separate signal.

from django.db.models.signals import post_save
from notifications.signals import notify
from myapp.models import MyModel

def my_handler(sender, instance, created, **kwargs):
    notify.send(instance, verb='was saved')

post_save.connect(my_handler, sender=MyModel)

есть продукт MyModel к оторому цепляются post_save.connect (post_save сигналы )
ниже представлени код рассылки пример из гита "you reached level 10"

from notifications.signals import notify

notify.send(user, recipient=user, verb='you reached level 10')

Live-updater API - временной интервал при запросе на нотификациии


ВИДЕО УРОКИ КАК ЭТО ДЕЛАТЬ 
https://www.youtube.com/watch?v=A__1WRiJnj4&list=PLp_WN118C-VfNw8LgU5XdvIv-XXDFcTAz&index=2


models.py


# промежуточная модель нотификации 
# - пользователь
#  - товар
#  - флаг о доставленной нотификации пока товара нет флаг находиться в значении false


class MiddlwareNotification(models.Model):
    # пользователь который подписывается на уведомление (нотификацию) который находится в системе
    user_name = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    # продукт на который подписывается пользователь
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    # флаг об доставленой нотификации 
    is_notified = models.BooleanField(default=False)
    
    def __str__(self):
        return "Нотификация для пользователя {0} о поступлении товара {1}".format(
        self.user_name.username, 
        self.product.title
        )


====================================
base.html
{% load notifications_tags %}
<script src="{% static 'notifications/notify.js' %}" type="text/javascript"></script>
{% register_notify_callbacks callbacks='fill_notification_list,fill_notification_badge' %}

вносим измения в views.py, models.py

product.html


=============================================
тюнинг тела нотификации происходит так

eComEnv/Lib/notification/static/notify.js
и удаляем что не нужно