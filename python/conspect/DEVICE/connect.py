Ввод пароля (прямой ввод с клавиатуры)

import getpass


password = getpass.getpass()
print(password)

----------------------------------------------
Переменные окружения (вариант хранения пароля)

$ export SSH_USER=user
$ export SSH_PASSWORD=userpass
А затем в Python считываются значения в переменные в скрипте:

import os


USERNAME = os.environ.get('SSH_USER')
PASSWORD = os.environ.get('SSH_PASSWORD')

---------------------------------------------

pexpect  - позволяет автоматизировать интерактивные подключения, такие как:
           telnet, ssh, ftp
pip install pexpect

import pexpect

# pexpect.run() - позволяет легко вызвать какую-то программу и вернуть её вывод

output = pexpect.run('ls -ls')
print(output)

# pexpect.spawn - позволяет взаимодействовать с вызванной программой, отправляя данные и ожидая ответ

t = pexpect.spawn('ssh user@10.1.1.1')  # подключение по SSH
t.expect('Password:')                   # pexpect ожидает строку Password
t.sendline('userpass')                  # Как только эта строка появилась, отправляется пароль
t.expect('>')                           # После отправки pexpect ожидает строку > 

--------------------------------------
Специальные символы в shell
Pexpect не интерпретирует специальные символы shell, такие как > , | , * .

Для того, чтобы, например, команда ls -ls | grep SUMMARY отработала, нужно

import pexpect

p = pexpect.spawn('/bin/bash -c "ls -ls | grep pexpect"')
p.expect(pexpect.EOF)    # Это специальное значение, которое позволяет отреагировать на завершение
                         #исполнения команды или сессии, которая была запущена в spawn.
# 0
print(p.before)
# b'4 -rw-r--r-- 1 vagrant vagrant 3203 Jul 14 07:15 1_pexpect.py\r\n'
print(p.before.decode('utf-8'))
# 4 -rw-r--r-- 1 vagrant vagrant 3203 Jul 14 07:15 1_pexpect.py


pexpect.expect: можно передавать не одно значение, а список.

p = pexpect.spawn('/bin/bash -c "ls -ls | grep netmiko"')
p.expect(['py3_convert', pexpect.TIMEOUT, pexpect.EOF])
2   # pexpect.expect возвращает номер элемента списка, который сработал

# когда pexpect.expect вызывается со списком, можно указывать разные ожидаемые строки
# кроме строк, можно указывать исключения
# pexpect.expect возвращает номер элемента списка, который сработал
# в данном случае номер 2, так как исключение EOF находится в списке под номером два
# за счет такого формата можно делать ответвления в программе, в зависимости от
# того, с каким элементом было совпадение

--------------------------------------------------
Модуль paramiko    - это реализация протокола SSHv2 на Python

pip install paramiko

--------------------------------------------------
Модуль netmiko - это модуль, который позволяет упростить использование paramiko для
сетевых устройств.
netmiko - это такая "обертка" для paramiko.

pip install netmiko

Словарь, определяющий параметры устройств
В словаре могут указываться такие параметры:

cisco_router = {'device_type': 'cisco_ios',     # предопределенный тип устройства
                'ip': '192.168.1.1',            # адрес устройства
                'username': 'user',             # имя пользователя
                'password': 'userpass',         # пароль пользователя
                'secret': 'enablepass',         # пароль режима enable
                'port': 20022,                  # порт SSH, по умолчанию 22
                }
                

ssh = ConnectHandler(**cisco_router)            # Подключение по SSH
ssh.enable()                                    # Перейти в режим enable
ssh.exit_enable_mode()                          # Выйти из режима enable

Отправка команд

send_command                                    # отправить одну команду
send_config_set                                 # отправить список команд
send_config_from_file                           # отправить команды из файла (использует внутри метод send_config_set )
send_command_timing                             # отправить команду и подождать вывод на основании таймера

--------------------------------------------------------------
send_command
result = ssh.send_command('show ip int br')

отправляет команду на устройство и получает вывод до строки с приглашением или до указанной строки
приглашение определяется автоматически
если на вашем устройстве оно не определилось, можно просто указать строку, до которой считывать вывод
ранее так работал метод send_command_expect , но с версии 1.0.0 так работает
send_command , а метод send_command_expect оставлен для совместимости метод возвращает вывод команды
методу можно передавать такие параметры:
 command_string  - команда
 expect_string   - до какой строки считывать вывод
 delay_factor    - параметр позволяет увеличить задержку до начала поиска строки
 max_loops       - количество итераций, до того как метод выдаст ошибку (исключение)
 strip_prompt    - удалить приглашение из вывода. По умолчанию удаляется
 strip_command   - удалить саму команду из вывода
 
-------------------------------------------------------------
send_config_set  
commands = ['router ospf 1',
            'network 10.0.0.0 0.255.255.255 area 0',
            'network 192.168.100.0 0.0.0.255 area 1']
result = ssh.send_config_set(commands)

Метод работает таким образом:
   -  заходит в конфигурационный режим,
   -  затем передает все команды
   -  и выходит из конфигурационного режима
   -  в зависимости от типа устройства, выхода из конфигурационного режима
      может и не быть. Например, для IOS-XR выхода не будет, так как сначала
      надо закоммитить изменения

-------------------------------------------------------------
send_config_from_file отправляет команды из указанного файла в конфигурационный режим.

result = ssh.send_config_from_file('config_ospf.txt')

Метод открывает файл, считывает команды и передает их методу send_config_set .

-------------------------------------------------------------

Дополнительные методы

config_mode             - перейти в режим конфигурации
ssh.config_mode()

exit_config_mode        - выйти из режима конфигурации
ssh.exit_config_mode()

check_config_mode       - проверить, находится ли netmiko в режиме конфигурации
                          (возвращает True, если в режиме конфигурации, и False - если нет)
ssh.check_config_mode()

find_prompt             - возвращает текущее приглашение устройства
ssh.find_prompt()

commit                  - выполнить commit на IOS-XR и Juniper
ssh.commit()

disconnect              - завершить соединение SSH
                        Тут ssh - это созданное предварительно соединение SSH: ssh =ConnectHandler(**cisco_router)
                        
------------------------------------------------------------

Telnet

параметры подключения, указать тип устройства 'cisco_ios_telnet':

DEVICE_PARAMS = {'device_type': 'cisco_ios_telnet',
                 'ip': IP,
                 'username':USER,
                 'password':PASSWORD,
                 'secret':ENABLE_PASS }
В остальном, методы, которые применимы к SSH, применимы и к Telnet. Пример, аналогичный примеру с SSH (файл 4_netmiko_telnet.py):